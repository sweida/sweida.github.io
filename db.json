{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Snippet/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Snippet/source/assets/highlight.pack.js","path":"assets/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/Snippet/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Snippet/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/head-img.jpg","path":"img/head-img.jpg","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/branding.png","path":"img/branding.png","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/timeline-dot.gif","path":"img/timeline-dot.gif","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/timeline-clock.gif","path":"img/timeline-clock.gif","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/timeline.gif","path":"img/timeline.gif","modified":0,"renderable":1},{"_id":"themes/Snippet/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Snippet/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/Snippet/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Snippet/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Snippet/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"themes/Snippet/.gitignore","hash":"5636464498c54867468ad1459c76b960af9c275c","modified":1528959424986},{"_id":"themes/Snippet/.travis.yml","hash":"eff9076460e59c53fb63922f97382be53e017a0c","modified":1529041936714},{"_id":"themes/Snippet/LICENSE","hash":"c976aafe3bc44246a978850b18102966afe3eeb5","modified":1528959424989},{"_id":"themes/Snippet/README.md","hash":"95debdeca09eb0b23ff64eea6fed26b5c1ee4586","modified":1528959424990},{"_id":"themes/Snippet/_travis.sh","hash":"de3894380a349f89ed3b7e53be53e2138acb010b","modified":1528959424991},{"_id":"themes/Snippet/_config.yml","hash":"ec4a60be9ec68966ba44136da40812df3fc11c8b","modified":1529052019976},{"_id":"themes/Snippet/gulpfile.js","hash":"432a5ca1356337c84dd77f6b09b7556a9aba5472","modified":1528959424992},{"_id":"themes/Snippet/package.json","hash":"a3d1e11ee7a8fb837389a62a29e4114d3c2d6358","modified":1528959425029},{"_id":"source/_posts/hello.md","hash":"590b07f0d93c19784a28b347c95289018b1da369","modified":1528968502450},{"_id":"source/_posts/hello-world.md","hash":"91fa065ba8907826bd611470f81e61f058e2aa68","modified":1528968154284},{"_id":"source/_posts/hello2.md","hash":"9fb691a4dc4201a8d169f2d9476433a7e30e6dc3","modified":1529033245571},{"_id":"source/_posts/page3.md","hash":"89dc7011380925e8fce1f98131aa7e87a11b3f0c","modified":1529030667499},{"_id":"themes/Snippet/.git/FETCH_HEAD","hash":"e1828fac6e7b7c4d4e35849920e2b25bdf5dd48f","modified":1528971781010},{"_id":"source/_posts/page35.md","hash":"ee82ebfce946ed9e40956af49fd17fd9ce9e34b9","modified":1528970315413},{"_id":"themes/Snippet/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528959424968},{"_id":"themes/Snippet/.git/config","hash":"df40e1ae5b75cd04f7d476826e76ab7f30de669f","modified":1528959424980},{"_id":"themes/Snippet/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528959417266},{"_id":"themes/Snippet/.git/index","hash":"bacbbfbffa9969b11f9581e7fb24f497395dc406","modified":1528959425068},{"_id":"themes/Snippet/.git/packed-refs","hash":"6d0b267cf8908f8a99acc0b938f77a97a12aa63d","modified":1528959424961},{"_id":"themes/Snippet/layout/archive.ejs","hash":"71d95943fe978f6f85922800e801cfdd3d06b958","modified":1528959425024},{"_id":"themes/Snippet/layout/category.ejs","hash":"91d904f43ae2ad5ec2b05bf1e2473657a8315b5c","modified":1528959425025},{"_id":"themes/Snippet/layout/index.ejs","hash":"15210e61a72dc40aadec03b36aec890359f37f91","modified":1528959425025},{"_id":"themes/Snippet/layout/layout.ejs","hash":"eab05fa61e54ef9e71a2601f0f705d2dd14914b1","modified":1528959425026},{"_id":"themes/Snippet/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528959425027},{"_id":"themes/Snippet/layout/post.ejs","hash":"fcc8e3cb343c9003b7790faf4c72500889cb8e1f","modified":1528959425028},{"_id":"themes/Snippet/layout/tag.ejs","hash":"e7062d08cfff13dfe8b8c8915a2eb0fafb0ae567","modified":1528959425028},{"_id":"themes/Snippet/languages/default.yml","hash":"fba74e9ce43225ca020ba07dabdc21ca5db67d16","modified":1529032139399},{"_id":"themes/Snippet/languages/zh-CN.yml","hash":"d704aeda3d7a801194d8077fa5e5482a8a46863e","modified":1529032098888},{"_id":"themes/Snippet/languages/zh-TW.yml","hash":"dcf715a0127cc2d54da2fe0ef69023f5f27f6be5","modified":1528959424994},{"_id":"themes/Snippet/scripts/helper.js","hash":"5502d8b4937be2463cd76ca82dcb8bd23c0090f6","modified":1528959425030},{"_id":"themes/Snippet/scripts/process.js","hash":"3b3ca8da64cacd9070ea8d888872348f301be2ac","modified":1528959425030},{"_id":"themes/Snippet/source/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1528959425041},{"_id":"themes/Snippet/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528959417267},{"_id":"themes/Snippet/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528959417268},{"_id":"themes/Snippet/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1528959417269},{"_id":"themes/Snippet/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528959417269},{"_id":"themes/Snippet/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528959417271},{"_id":"themes/Snippet/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528959417271},{"_id":"themes/Snippet/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528959417272},{"_id":"themes/Snippet/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1528959417273},{"_id":"themes/Snippet/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1528959417274},{"_id":"themes/Snippet/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1528959417275},{"_id":"themes/Snippet/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1528959417274},{"_id":"themes/Snippet/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1528959417276},{"_id":"themes/Snippet/.git/logs/HEAD","hash":"299eb9313f2e3bd6f9fe61e4c912b436239539ea","modified":1528959424972},{"_id":"themes/Snippet/layout/_partial/archive.ejs","hash":"f84e9ef94d8ec61b0788c1f489df93d211833ea7","modified":1528959424998},{"_id":"themes/Snippet/layout/_partial/article-meta.ejs","hash":"943bc4b4086144cbf528d97e58d701dfec73c16a","modified":1528959424999},{"_id":"themes/Snippet/layout/_partial/copyright.ejs","hash":"bb76b7a2ca6688ec56af86cb34b99f7a048a60a8","modified":1528969537667},{"_id":"themes/Snippet/layout/_partial/article.ejs","hash":"5f7c7bdfbc09acf5ae86293a9cf6018c812a3250","modified":1528959425000},{"_id":"themes/Snippet/layout/_partial/footer.ejs","hash":"9bf583c2f5a568415370bff2e38d59530b90f5be","modified":1528959425002},{"_id":"themes/Snippet/layout/_partial/gallery.ejs","hash":"aecfcee48528c5e8cbf7d23765e030a3fbdd1baf","modified":1528959425003},{"_id":"themes/Snippet/layout/_partial/head.ejs","hash":"89038b5a71b1bbc575657b1b78f32b2ab87c2d66","modified":1529042191873},{"_id":"themes/Snippet/layout/_partial/header.ejs","hash":"25625d64245a6e378da030ce77ddf6a53213225b","modified":1528959425004},{"_id":"themes/Snippet/layout/_partial/pagination.ejs","hash":"20eff43ad205febe8fc675d669b2be0b88c7158e","modified":1528959425006},{"_id":"themes/Snippet/layout/_partial/nav.ejs","hash":"2a3b5cdd07177c0e837843e9104ef5bb4afc1c98","modified":1528959425005},{"_id":"themes/Snippet/layout/_partial/script.ejs","hash":"699868423005d249bde9103b4778583a043b80f5","modified":1528959425007},{"_id":"themes/Snippet/layout/_partial/sidebar.ejs","hash":"7a4dd0aa5a5acf3a56734385152c28591c45602e","modified":1528959425007},{"_id":"themes/Snippet/layout/_partial/toc.ejs","hash":"f48979d698d7d6c8c04aa7377332af66fd5daa3a","modified":1528959425008},{"_id":"themes/Snippet/layout/_vendor/baidu_sitemap.ejs","hash":"144240fdb2824332a83530427fe8db051492e62a","modified":1528959425013},{"_id":"themes/Snippet/layout/_widget/archive.ejs","hash":"f5584d0e8de39b0e4d4ddecbc279aec3097ed048","modified":1528959425019},{"_id":"themes/Snippet/layout/_widget/friends.ejs","hash":"26eb71dd79f1e7d222b210ecd3afd2e177e1250e","modified":1528959425020},{"_id":"themes/Snippet/layout/_widget/category.ejs","hash":"dcdb7a08a2f17beaf610de4e937047c291f39a90","modified":1528959425020},{"_id":"themes/Snippet/layout/_widget/notification.ejs","hash":"3ff6241bd148229a359758e36f36696ba4af62fb","modified":1528959425021},{"_id":"themes/Snippet/layout/_widget/social.ejs","hash":"83be8c71b5b40b79aed50263c28c99282559c23a","modified":1528959425022},{"_id":"themes/Snippet/layout/_widget/search.ejs","hash":"b24c9278fded2c144053f146941f23705c105839","modified":1528959425021},{"_id":"themes/Snippet/layout/_widget/stick.ejs","hash":"e74057f89b1129fe0781ec6002a4a3f178aa734b","modified":1528959425023},{"_id":"themes/Snippet/layout/_widget/tagcloud.ejs","hash":"5d9929f9e771878d473b0b8dc6381c8bb78c9a44","modified":1528959425023},{"_id":"themes/Snippet/source/assets/highlight.pack.js","hash":"b93558f0b97e233132a8ccf7f0275053f2df4628","modified":1528959425032},{"_id":"themes/Snippet/source/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1528959425035},{"_id":"themes/Snippet/source/css/style.css","hash":"68794ea0ebca4e1aae5c80f1e10df813c5b63f07","modified":1529045784409},{"_id":"themes/Snippet/source/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1528959425058},{"_id":"themes/Snippet/source/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1528959425060},{"_id":"themes/Snippet/source/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1528959425059},{"_id":"themes/Snippet/source/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1528959425063},{"_id":"themes/Snippet/source/img/timeline-clock.gif","hash":"e1f3e1061a38e9dcaa26963ab809ba0a70bb8221","modified":1528959425062},{"_id":"themes/Snippet/source/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1528959425065},{"_id":"themes/Snippet/source/js/search.js","hash":"f5d4be173934c38be5b6e8561bdcabe91c6cc2d7","modified":1528959425067},{"_id":"themes/Snippet/source/js/app.js","hash":"ea09fee9577cda06f27a57a7a889e758545b05cb","modified":1528959425066},{"_id":"themes/Snippet/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1528959425034},{"_id":"themes/Snippet/source/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1528959425061},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1528959425056},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1528959425057},{"_id":"themes/Snippet/.git/objects/pack/pack-8c05800c70dfb9a01b6eff4f4f6cc07340035aac.idx","hash":"7776ff489e55ae908031e897a1840e18eba146b5","modified":1528959424738},{"_id":"themes/Snippet/.git/refs/heads/master","hash":"a69196c50bfeef1d0a167c7e4d8f17ad0ca49e64","modified":1528959424972},{"_id":"themes/Snippet/layout/_partial/_head-sections/seo.ejs","hash":"1eabe3d23806f659206ee4f5ab51c21818112c07","modified":1528959424996},{"_id":"themes/Snippet/layout/_partial/_head-sections/IE.ejs","hash":"7cdbf6bc632c135925e00d5e27243d94a44c8031","modified":1528959424996},{"_id":"themes/Snippet/layout/_partial/_head-sections/style.ejs","hash":"8ff2d85b26e0a5b844bfbfbdd55a7cf5628cfc03","modified":1528959424997},{"_id":"themes/Snippet/layout/_partial/_head-sections/title.ejs","hash":"0b55f4dcab22788bb5b9b4f0246264278145a424","modified":1528959424998},{"_id":"themes/Snippet/layout/_vendor/analytics/baidu.ejs","hash":"e616c6d618d2aa34baa0f244de770abcee8b56f4","modified":1528959425009},{"_id":"themes/Snippet/layout/_vendor/analytics/cnzz.ejs","hash":"e12c2cba1b0a9447e7a46b88a1c4d175e65bbf98","modified":1528959425010},{"_id":"themes/Snippet/layout/_vendor/analytics/google.ejs","hash":"1ee0f1fadedc00633b3ab30b93bdeffe22b18afe","modified":1528959425011},{"_id":"themes/Snippet/layout/_vendor/analytics/index.ejs","hash":"68b3680acd34f62b0b4e0017e3d8bab20d4e459f","modified":1528959425012},{"_id":"themes/Snippet/layout/_vendor/analytics/tencent.ejs","hash":"4b713bf9c215b382cf985e2e9d94e0d770e75e90","modified":1528959425012},{"_id":"themes/Snippet/layout/_vendor/comments/changyan.ejs","hash":"c75ac620d6a336921fa61090d22e5cf0a09019a1","modified":1528959425014},{"_id":"themes/Snippet/layout/_vendor/comments/disqus.ejs","hash":"0713d00c14a9b5f3b6814f5a9ea6cf21142a511c","modified":1528959425015},{"_id":"themes/Snippet/layout/_vendor/comments/gitment.ejs","hash":"09e6f66d28003ae8bbf550ac428fbc7f953ff3de","modified":1529030351237},{"_id":"themes/Snippet/layout/_vendor/comments/index.ejs","hash":"feca37b274680c5089cfccebb81bad5dd3e76d03","modified":1528959425016},{"_id":"themes/Snippet/layout/_vendor/comments/uyan.ejs","hash":"4d5e43c69eb28d2f45bba3c1cee25d773b02f0d0","modified":1528959425018},{"_id":"themes/Snippet/layout/_vendor/comments/livere.ejs","hash":"084108977f3767b961361495216271972b1ada39","modified":1528959425017},{"_id":"themes/Snippet/source/css/less/_highlight.less","hash":"d523d462bc4c5a6a0249659ff73ef159f19ded7c","modified":1529044411847},{"_id":"themes/Snippet/source/css/less/_timeline.less","hash":"a1cece09a5fda5f7c84c55871e6faca8a75b654b","modified":1528959425039},{"_id":"themes/Snippet/source/css/less/_mixins.less","hash":"74f250b8c287ca5840f4d09a87eb23b69a722a8a","modified":1528959425037},{"_id":"themes/Snippet/source/css/less/_style.less","hash":"d71609f1a2e046d33d36b3bd0f680c1939ff448d","modified":1528959425038},{"_id":"themes/Snippet/source/css/less/_variable.less","hash":"dba7274bc9a0baf2fca2bc764bb436b2e3c36eb9","modified":1528959425039},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1528959425047},{"_id":"themes/Snippet/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1528959425044},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1528959425054},{"_id":"themes/Snippet/.git/logs/refs/heads/master","hash":"299eb9313f2e3bd6f9fe61e4c912b436239539ea","modified":1528959424974},{"_id":"themes/Snippet/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528959424967},{"_id":"themes/Snippet/.git/logs/refs/remotes/origin/HEAD","hash":"299eb9313f2e3bd6f9fe61e4c912b436239539ea","modified":1528959424967},{"_id":"themes/Snippet/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1528959425051},{"_id":"themes/Snippet/.git/objects/pack/pack-8c05800c70dfb9a01b6eff4f4f6cc07340035aac.pack","hash":"1c8fd3c409a2ebc827bff2096d0f1176357342b6","modified":1528959424791},{"_id":"public/2018/06/14/page35/index.html","hash":"cda5dd9bc8ac566d06040b822c1988c5b620cce5","modified":1529024422574},{"_id":"public/2018/06/14/page3/index.html","hash":"198d8784e1d850956fa4fbe01a61c33e3d0cab1d","modified":1529024422574},{"_id":"public/2018/06/14/hello2/index.html","hash":"dfbd32b3848f1aad60650cc4b0b7749180a83bdb","modified":1529024422574},{"_id":"public/2018/06/14/hello/index.html","hash":"4643b49fa24664863f237c6ff7c25dfaf4878325","modified":1529024422575},{"_id":"public/2017/09/14/hello-world/index.html","hash":"e0db2532c3643207532e320f47dedbc3593097bf","modified":1529024422575},{"_id":"public/archives/index.html","hash":"6c7e8b5ea27f8b0803b46b469a96a6a21d9f6d46","modified":1529024422575},{"_id":"public/archives/2017/index.html","hash":"9691aaa21ea5f0afef1b60c61b8c80b16f198427","modified":1529024422575},{"_id":"public/archives/2017/09/index.html","hash":"d5ae168b7cf03153d27f8dfe205b6a09d2a4564d","modified":1529024422575},{"_id":"public/archives/2018/index.html","hash":"6a537ce9aa4dc86211aa35f070d9ab4e1b6ed977","modified":1529024422575},{"_id":"public/archives/2018/06/index.html","hash":"d68a1e70935414ab8b09c2cbc439debbb69c090a","modified":1529024422575},{"_id":"public/categories/工具/index.html","hash":"1e64522b8533e2bdc8b76b17055c839f162b2a5a","modified":1529024422575},{"_id":"public/categories/后端/index.html","hash":"0cb91f9ca4ac0bb2baf29e59d18af351b2fe2e51","modified":1529024422575},{"_id":"public/categories/前端/index.html","hash":"5dedc9a2a4ee13cd8278ecef8ac06952cf6f3ebc","modified":1529024422576},{"_id":"public/index.html","hash":"3755f06913ac610b6c5898ec8015c2b4874cca5a","modified":1529024422576},{"_id":"public/tags/react/index.html","hash":"8cba948d9417a52d9faa9786a29e64b1066790f6","modified":1529024422576},{"_id":"public/tags/node/index.html","hash":"ffc7b56683a2a23547de017a29be64e2def52234","modified":1529024422576},{"_id":"public/tags/vue/index.html","hash":"8c879c4a50bfd327a60d8223f69a9eca12cbc6c4","modified":1529024422576},{"_id":"public/favicon.ico","hash":"65f26147ea3433ffd64d3f18bf281af48dc5d06e","modified":1529024422584},{"_id":"public/img/avatar.jpg","hash":"512025710a8c6c938ab636fcb3c9da1c8df0eec0","modified":1529024422584},{"_id":"public/img/head-img.jpg","hash":"a318d304665c2f410f79e6d2eb1b98119f675b4b","modified":1529024422584},{"_id":"public/img/branding.png","hash":"18bee49d6a4c521ad230047c0b416245e009c2c9","modified":1529024422584},{"_id":"public/img/timeline-dot.gif","hash":"c85ef87be5b631c009e7c5737d33b61dfe580a4d","modified":1529024422585},{"_id":"public/img/timeline-clock.gif","hash":"e1f3e1061a38e9dcaa26963ab809ba0a70bb8221","modified":1529024422585},{"_id":"public/img/timeline.gif","hash":"b7c7aac44e618df19626d882dc46db48a4aa3673","modified":1529024422585},{"_id":"public/img/loading.gif","hash":"6cea4dc953ac09fb744c7fedc12a1f4736faf8ec","modified":1529024422589},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529024422589},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529024422589},{"_id":"public/js/app.js","hash":"eca509fc5b45dcd1a0007c62f740529ca31a122f","modified":1529024422592},{"_id":"public/js/search.js","hash":"a6c7ac73821e5c7db7d4ae6de2d00f44367a858e","modified":1529024422592},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529024422592},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529024422592},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529024422592},{"_id":"public/assets/highlight.pack.js","hash":"f39840759ec9afe56ec1ca30579d1f1c9d1f6026","modified":1529024422595},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1529024422598},{"_id":"public/css/style.css","hash":"3da0a760d82839637812655a9c5b0e1067ff70b8","modified":1529024422598},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1529024422601},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1529024422607},{"_id":"source/CNAME","hash":"c9d133720b68b89c208ffc1a65125f209e58c4d5","modified":1529025268048},{"_id":"themes/Snippet/source/favicon.png","hash":"b93095a15347890f2fda1b5a160f14d19aba2f1d","modified":1528963387692},{"_id":"source/_posts/HTML5存储使用详解（本地存储、会话存储）.md","hash":"6bc4a932e8891397a3b137514c41abdf9c9b4e2f","modified":1529034536142},{"_id":"source/_posts/javascript里的this.md","hash":"082638fe82be6f0be68ca16ef9c811f535a3d7ea","modified":1529033968441},{"_id":"source/_posts/三张图搞懂JavaScript的原型对象与原型链.md","hash":"ac233d2d3aa977da4693b70c2c2aca5233ef4017","modified":1529033596689},{"_id":"source/_posts/删除github上远程的分支.md","hash":"a5418d55e035cff390312dcf9d7cefce7f9204aa","modified":1529051517036},{"_id":"source/_posts/删除github上远程的分支/001.png","hash":"4fb8d2068f9a72cfd30edfde973bdc09c88e2472","modified":1529048471997},{"_id":"source/_posts/如何删除github上远程的分支.md","hash":"42835834d943f08ee5e983c56893e145cab33598","modified":1529048983980}],"Category":[{"name":"工具","_id":"cjif9nuwf0002wks068eubjlp"},{"name":"后端","_id":"cjif9nuwn0007wks09h18wfbu"},{"name":"前端","_id":"cjif9nuwr000bwks0f7xen2ib"}],"Data":[],"Page":[],"Post":[{"title":"hello","date":"2018-06-14T09:03:25.000Z","comments":1,"_content":"","source":"_posts/hello.md","raw":"---\ntitle: hello\ndate: 2018-06-14 17:03:25\ntags:\ncategories: 工具\ncomments: true\n---\n","slug":"hello","published":1,"updated":"2018-06-14T09:28:22.450Z","layout":"post","photos":[],"link":"","_id":"cjif9nuw70000wks0535pw6te","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hello2","date":"2018-06-14T09:03:57.000Z","_content":"","source":"_posts/hello2.md","raw":"---\ntitle: hello2\ndate: 2018-06-14 17:03:57\ntags:\ncategories: 后端\n---\n","slug":"hello2","published":1,"updated":"2018-06-15T03:27:25.571Z","_id":"cjif9nuwc0001wks0rrsbmoet","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","date":"2017-09-14T09:16:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-09-14 17:16:00\ntags:\n  - Git\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-06-15T09:05:42.220Z","_id":"cjif9nuwh0003wks0a3wyc9rs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Gitment：使用 GitHub Issues 搭建评论系统","date":"2018-06-14T09:16:55.000Z","_content":"\nGitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。\n\n本博客评论系统已迁移至 Gitment。虽然 Gitment 只能使用 GitHub 账号进行评论，但考虑到博客受众，这是可以接受的。\n","source":"_posts/page3.md","raw":"---\ntitle: Gitment：使用 GitHub Issues 搭建评论系统\ndate: 2018-06-14 17:16:55\ntags: Gitment\ncategories: 前端\n---\n\nGitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。\n\n本博客评论系统已迁移至 Gitment。虽然 Gitment 只能使用 GitHub 账号进行评论，但考虑到博客受众，这是可以接受的。\n","slug":"page3","published":1,"updated":"2018-06-15T02:44:27.499Z","_id":"cjif9nuwj0004wks0j4pfk3fg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Gitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p>\n<p>本博客评论系统已迁移至 Gitment。虽然 Gitment 只能使用 GitHub 账号进行评论，但考虑到博客受众，这是可以接受的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Gitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p>\n<p>本博客评论系统已迁移至 Gitment。虽然 Gitment 只能使用 GitHub 账号进行评论，但考虑到博客受众，这是可以接受的。</p>\n"},{"title":"page34444","date":"2018-06-14T09:16:55.000Z","img":"http://7xpw2b.com1.z0.glb.clouddn.com/hexo-sinppet/img/banner.jpg","_content":"","source":"_posts/page35.md","raw":"---\ntitle: page34444\ndate: 2018-06-14 17:16:55\ntags: \n  - vue\n  - react\ncategories: 前端\nimg: http://7xpw2b.com1.z0.glb.clouddn.com/hexo-sinppet/img/banner.jpg\n---\n","slug":"page35","published":1,"updated":"2018-06-14T09:58:35.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjif9nuwm0006wks09u6qydvb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"三张图搞懂JavaScript的原型对象与原型链","date":"2018-06-15T03:31:41.000Z","_content":"\n对于新人来说，JavaScript的原型是一个很让人头疼的事情，一来prototype容易与__proto__混淆，二来它们之间的各种指向实在有些复杂，其实市面上已经有非常多的文章在尝试说清楚，有一张所谓很经典的图，上面画了各种线条，一会连接这个一会连接那个，说实话我自己看得就非常头晕，更谈不上完全理解了。所以我自己也想尝试一下，看看能不能把原型中的重要知识点拆分出来，用最简单的图表形式说清楚。\n\n我们知道原型是一个对象，其他对象可以通过它实现属性继承。但是尼玛除了prototype，又有一个__proto__是用来干嘛的？长那么像，让人怎么区分呢？它们都指向谁，那么混乱怎么记啊？原型链又是什么鬼？相信不少初学者甚至有一定经验的老鸟都不一定能完全说清楚，下面用三张简单的图，配合一些示例代码来理解一下。\n![787416-20160323103557261-114570044](https://user-images.githubusercontent.com/23181508/32229578-1d7b12d0-be8c-11e7-875a-61d8e8e9418a.png)\n```javascript\nvar a = {};\nconsole.log(a.prototype);  //undefined\nconsole.log(a.__proto__);  //Object {}\n\nvar b = function(){}\nconsole.log(b.prototype);  //b {}\nconsole.log(b.__proto__);  //function() {}\n```\n\n\n![787416-20160323103622089-1134417169](https://user-images.githubusercontent.com/23181508/32230145-75fd3356-be8d-11e7-909b-906aad2f1d6c.png)\n```javascript\n/*1、字面量方式*/\nvar a = {};\nconsole.log(a.__proto__);  //Object {}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //true\n\n/*2、构造器方式*/\nvar A = function(){};\nvar a = new A();\nconsole.log(a.__proto__); //A {}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //true\n\n/*3、Object.create()方式*/\nvar a1 = {a:1}\nvar a2 = Object.create(a1);\nconsole.log(a2.__proto__); //Object {a: 1}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //false（此处即为图1中的例外情况）\n```\n\n\n![787416-20160322110905589-2039017350](https://user-images.githubusercontent.com/23181508/32230148-772e5aa2-be8d-11e7-8a75-05ad77ea46af.png)\n```javascript\nvar A = function(){};\nvar a = new A();\nconsole.log(a.__proto__); //A {}（即构造器function A 的原型对象）\nconsole.log(a.__proto__.__proto__); //Object {}（即构造器function Object 的原型对象）\nconsole.log(a.__proto__.__proto__.__proto__); //null\n```\n","source":"_posts/三张图搞懂JavaScript的原型对象与原型链.md","raw":"---\ntitle: 三张图搞懂JavaScript的原型对象与原型链\ndate: 2018-06-15 11:31:41\ntags:\n  - JavaScript\ncategories: 前端\n---\n\n对于新人来说，JavaScript的原型是一个很让人头疼的事情，一来prototype容易与__proto__混淆，二来它们之间的各种指向实在有些复杂，其实市面上已经有非常多的文章在尝试说清楚，有一张所谓很经典的图，上面画了各种线条，一会连接这个一会连接那个，说实话我自己看得就非常头晕，更谈不上完全理解了。所以我自己也想尝试一下，看看能不能把原型中的重要知识点拆分出来，用最简单的图表形式说清楚。\n\n我们知道原型是一个对象，其他对象可以通过它实现属性继承。但是尼玛除了prototype，又有一个__proto__是用来干嘛的？长那么像，让人怎么区分呢？它们都指向谁，那么混乱怎么记啊？原型链又是什么鬼？相信不少初学者甚至有一定经验的老鸟都不一定能完全说清楚，下面用三张简单的图，配合一些示例代码来理解一下。\n![787416-20160323103557261-114570044](https://user-images.githubusercontent.com/23181508/32229578-1d7b12d0-be8c-11e7-875a-61d8e8e9418a.png)\n```javascript\nvar a = {};\nconsole.log(a.prototype);  //undefined\nconsole.log(a.__proto__);  //Object {}\n\nvar b = function(){}\nconsole.log(b.prototype);  //b {}\nconsole.log(b.__proto__);  //function() {}\n```\n\n\n![787416-20160323103622089-1134417169](https://user-images.githubusercontent.com/23181508/32230145-75fd3356-be8d-11e7-909b-906aad2f1d6c.png)\n```javascript\n/*1、字面量方式*/\nvar a = {};\nconsole.log(a.__proto__);  //Object {}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //true\n\n/*2、构造器方式*/\nvar A = function(){};\nvar a = new A();\nconsole.log(a.__proto__); //A {}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //true\n\n/*3、Object.create()方式*/\nvar a1 = {a:1}\nvar a2 = Object.create(a1);\nconsole.log(a2.__proto__); //Object {a: 1}\n\nconsole.log(a.__proto__ === a.constructor.prototype); //false（此处即为图1中的例外情况）\n```\n\n\n![787416-20160322110905589-2039017350](https://user-images.githubusercontent.com/23181508/32230148-772e5aa2-be8d-11e7-8a75-05ad77ea46af.png)\n```javascript\nvar A = function(){};\nvar a = new A();\nconsole.log(a.__proto__); //A {}（即构造器function A 的原型对象）\nconsole.log(a.__proto__.__proto__); //Object {}（即构造器function Object 的原型对象）\nconsole.log(a.__proto__.__proto__.__proto__); //null\n```\n","slug":"三张图搞懂JavaScript的原型对象与原型链","published":1,"updated":"2018-06-15T03:33:16.689Z","_id":"cjiff2g720001r0s07efvqlbu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于新人来说，JavaScript的原型是一个很让人头疼的事情，一来prototype容易与<strong>proto</strong>混淆，二来它们之间的各种指向实在有些复杂，其实市面上已经有非常多的文章在尝试说清楚，有一张所谓很经典的图，上面画了各种线条，一会连接这个一会连接那个，说实话我自己看得就非常头晕，更谈不上完全理解了。所以我自己也想尝试一下，看看能不能把原型中的重要知识点拆分出来，用最简单的图表形式说清楚。</p>\n<p>我们知道原型是一个对象，其他对象可以通过它实现属性继承。但是尼玛除了prototype，又有一个<strong>proto</strong>是用来干嘛的？长那么像，让人怎么区分呢？它们都指向谁，那么混乱怎么记啊？原型链又是什么鬼？相信不少初学者甚至有一定经验的老鸟都不一定能完全说清楚，下面用三张简单的图，配合一些示例代码来理解一下。<br><img src=\"https://user-images.githubusercontent.com/23181508/32229578-1d7b12d0-be8c-11e7-875a-61d8e8e9418a.png\" alt=\"787416-20160323103557261-114570044\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.prototype);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__);  <span class=\"comment\">//Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.prototype);  <span class=\"comment\">//b &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.__proto__);  <span class=\"comment\">//function() &#123;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-images.githubusercontent.com/23181508/32230145-75fd3356-be8d-11e7-909b-906aad2f1d6c.png\" alt=\"787416-20160323103622089-1134417169\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1、字面量方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__);  <span class=\"comment\">//Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*2、构造器方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__); <span class=\"comment\">//A &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*3、Object.create()方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"built_in\">Object</span>.create(a1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2.__proto__); <span class=\"comment\">//Object &#123;a: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//false（此处即为图1中的例外情况）</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-images.githubusercontent.com/23181508/32230148-772e5aa2-be8d-11e7-8a75-05ad77ea46af.png\" alt=\"787416-20160322110905589-2039017350\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__); <span class=\"comment\">//A &#123;&#125;（即构造器function A 的原型对象）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__.__proto__); <span class=\"comment\">//Object &#123;&#125;（即构造器function Object 的原型对象）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__.__proto__.__proto__); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于新人来说，JavaScript的原型是一个很让人头疼的事情，一来prototype容易与<strong>proto</strong>混淆，二来它们之间的各种指向实在有些复杂，其实市面上已经有非常多的文章在尝试说清楚，有一张所谓很经典的图，上面画了各种线条，一会连接这个一会连接那个，说实话我自己看得就非常头晕，更谈不上完全理解了。所以我自己也想尝试一下，看看能不能把原型中的重要知识点拆分出来，用最简单的图表形式说清楚。</p>\n<p>我们知道原型是一个对象，其他对象可以通过它实现属性继承。但是尼玛除了prototype，又有一个<strong>proto</strong>是用来干嘛的？长那么像，让人怎么区分呢？它们都指向谁，那么混乱怎么记啊？原型链又是什么鬼？相信不少初学者甚至有一定经验的老鸟都不一定能完全说清楚，下面用三张简单的图，配合一些示例代码来理解一下。<br><img src=\"https://user-images.githubusercontent.com/23181508/32229578-1d7b12d0-be8c-11e7-875a-61d8e8e9418a.png\" alt=\"787416-20160323103557261-114570044\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.prototype);  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__);  <span class=\"comment\">//Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.prototype);  <span class=\"comment\">//b &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.__proto__);  <span class=\"comment\">//function() &#123;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-images.githubusercontent.com/23181508/32230145-75fd3356-be8d-11e7-909b-906aad2f1d6c.png\" alt=\"787416-20160323103622089-1134417169\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*1、字面量方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__);  <span class=\"comment\">//Object &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*2、构造器方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__); <span class=\"comment\">//A &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*3、Object.create()方式*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"built_in\">Object</span>.create(a1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2.__proto__); <span class=\"comment\">//Object &#123;a: 1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__ === a.constructor.prototype); <span class=\"comment\">//false（此处即为图1中的例外情况）</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://user-images.githubusercontent.com/23181508/32230148-772e5aa2-be8d-11e7-8a75-05ad77ea46af.png\" alt=\"787416-20160322110905589-2039017350\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__); <span class=\"comment\">//A &#123;&#125;（即构造器function A 的原型对象）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__.__proto__); <span class=\"comment\">//Object &#123;&#125;（即构造器function Object 的原型对象）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.__proto__.__proto__.__proto__); <span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"javascript里的this","date":"2017-08-15T03:37:27.000Z","_content":"\n在一个对象中绑定函数，称为这个对象的方法。\n\n在JavaScript中，对象的定义是这样的：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    birth: 1990\n};\n```\n但是，如果我们给xiaoming绑定一个函数，就可以做更多的事情。比如，写个age()方法，返回xiaoming的年龄：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var y = new Date().getFullYear();\n        return y - this.birth;\n    }\n};\n\nxiaoming.age; // function xiaoming.age()\nxiaoming.age(); // 今年调用是25,明年调用就变成26了\n```\n绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字，这个东东是什么？\n\n在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。\n\n让我们拆开写：\n\n```javascript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25, 正常结果\ngetAge(); // NaN\n```\n单独调用函数getAge()怎么返回了NaN？请注意，我们已经进入到了JavaScript的一个大坑里。\n\nJavaScript的函数内部如果调用了this，那么这个this到底指向谁？\n\n答案是，视情况而定！\n\n如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。\n\n如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。\n\n坑爹啊！\n\n更坑爹的是，如果这么写：\n```\nvar fn = xiaoming.age; // 先拿到xiaoming的age函数\nfn(); // NaN\n```\n也是不行的！要保证this指向正确，必须用obj.xxx()的形式调用！\n\n```javascript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\n```\n用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。\napply\n\n虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！\n\n要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。\n\n用apply修复getAge()调用：\n```javascript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n```\n另一个与apply()类似的方法是call()，唯一区别是：\n\napply()把参数打包成Array再传入；\n\ncall()把参数按顺序传入。\n","source":"_posts/javascript里的this.md","raw":"---\ntitle: javascript里的this\ndate: 2017-08-15 11:37:27\ntags:\n  - JavaScript\ncategories: 前端\n\n---\n\n在一个对象中绑定函数，称为这个对象的方法。\n\n在JavaScript中，对象的定义是这样的：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    birth: 1990\n};\n```\n但是，如果我们给xiaoming绑定一个函数，就可以做更多的事情。比如，写个age()方法，返回xiaoming的年龄：\n\n```javascript\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var y = new Date().getFullYear();\n        return y - this.birth;\n    }\n};\n\nxiaoming.age; // function xiaoming.age()\nxiaoming.age(); // 今年调用是25,明年调用就变成26了\n```\n绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字，这个东东是什么？\n\n在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。\n\n让我们拆开写：\n\n```javascript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25, 正常结果\ngetAge(); // NaN\n```\n单独调用函数getAge()怎么返回了NaN？请注意，我们已经进入到了JavaScript的一个大坑里。\n\nJavaScript的函数内部如果调用了this，那么这个this到底指向谁？\n\n答案是，视情况而定！\n\n如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。\n\n如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。\n\n坑爹啊！\n\n更坑爹的是，如果这么写：\n```\nvar fn = xiaoming.age; // 先拿到xiaoming的age函数\nfn(); // NaN\n```\n也是不行的！要保证this指向正确，必须用obj.xxx()的形式调用！\n\n```javascript\n'use strict';\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: function () {\n        var that = this; // 在方法内部一开始就捕获this\n        function getAgeFromBirth() {\n            var y = new Date().getFullYear();\n            return y - that.birth; // 用that而不是this\n        }\n        return getAgeFromBirth();\n    }\n};\n\nxiaoming.age(); // 25\n```\n用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。\napply\n\n虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！\n\n要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。\n\n用apply修复getAge()调用：\n```javascript\nfunction getAge() {\n    var y = new Date().getFullYear();\n    return y - this.birth;\n}\n\nvar xiaoming = {\n    name: '小明',\n    birth: 1990,\n    age: getAge\n};\n\nxiaoming.age(); // 25\ngetAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空\n```\n另一个与apply()类似的方法是call()，唯一区别是：\n\napply()把参数打包成Array再传入；\n\ncall()把参数按顺序传入。\n","slug":"javascript里的this","published":1,"updated":"2018-06-15T03:39:28.441Z","_id":"cjiff9vd80005r0s0yxuitrfj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在一个对象中绑定函数，称为这个对象的方法。</p>\n<p>在JavaScript中，对象的定义是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们给xiaoming绑定一个函数，就可以做更多的事情。比如，写个age()方法，返回xiaoming的年龄：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age; <span class=\"comment\">// function xiaoming.age()</span></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 今年调用是25,明年调用就变成26了</span></span><br></pre></td></tr></table></figure>\n<p>绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字，这个东东是什么？</p>\n<p>在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。</p>\n<p>让我们拆开写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: getAge</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25, 正常结果</span></span><br><span class=\"line\">getAge(); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>单独调用函数getAge()怎么返回了NaN？请注意，我们已经进入到了JavaScript的一个大坑里。</p>\n<p>JavaScript的函数内部如果调用了this，那么这个this到底指向谁？</p>\n<p>答案是，视情况而定！</p>\n<p>如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。</p>\n<p>如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。</p>\n<p>坑爹啊！</p>\n<p>更坑爹的是，如果这么写：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">fn</span> = xiaoming.age</span>; <span class=\"comment\">// 先拿到xiaoming的age函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span><span class=\"params\">()</span></span>; <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure></p>\n<p>也是不行的！要保证this指向正确，必须用obj.xxx()的形式调用！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 在方法内部一开始就捕获this</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> y - that.birth; <span class=\"comment\">// 用that而不是this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAgeFromBirth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n<p>用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。<br>apply</p>\n<p>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p>\n<p>要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>\n<p>用apply修复getAge()调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: getAge</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></span><br><span class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个与apply()类似的方法是call()，唯一区别是：</p>\n<p>apply()把参数打包成Array再传入；</p>\n<p>call()把参数按顺序传入。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在一个对象中绑定函数，称为这个对象的方法。</p>\n<p>在JavaScript中，对象的定义是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>但是，如果我们给xiaoming绑定一个函数，就可以做更多的事情。比如，写个age()方法，返回xiaoming的年龄：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age; <span class=\"comment\">// function xiaoming.age()</span></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 今年调用是25,明年调用就变成26了</span></span><br></pre></td></tr></table></figure>\n<p>绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字，这个东东是什么？</p>\n<p>在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。</p>\n<p>让我们拆开写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: getAge</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25, 正常结果</span></span><br><span class=\"line\">getAge(); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>单独调用函数getAge()怎么返回了NaN？请注意，我们已经进入到了JavaScript的一个大坑里。</p>\n<p>JavaScript的函数内部如果调用了this，那么这个this到底指向谁？</p>\n<p>答案是，视情况而定！</p>\n<p>如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。</p>\n<p>如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。</p>\n<p>坑爹啊！</p>\n<p>更坑爹的是，如果这么写：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">fn</span> = xiaoming.age</span>; <span class=\"comment\">// 先拿到xiaoming的age函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span><span class=\"params\">()</span></span>; <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure></p>\n<p>也是不行的！要保证this指向正确，必须用obj.xxx()的形式调用！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>; <span class=\"comment\">// 在方法内部一开始就捕获this</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAgeFromBirth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> y - that.birth; <span class=\"comment\">// 用that而不是this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getAgeFromBirth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></span><br></pre></td></tr></table></figure>\n<p>用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。<br>apply</p>\n<p>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p>\n<p>要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p>\n<p>用apply修复getAge()调用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: getAge</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 25</span></span><br><span class=\"line\">getAge.apply(xiaoming, []); <span class=\"comment\">// 25, this指向xiaoming, 参数为空</span></span><br></pre></td></tr></table></figure></p>\n<p>另一个与apply()类似的方法是call()，唯一区别是：</p>\n<p>apply()把参数打包成Array再传入；</p>\n<p>call()把参数按顺序传入。</p>\n"},{"title":"HTML5存储使用详解（本地存储、会话存储）","date":"2018-06-15T03:44:02.000Z","id":"2323","_content":"\n### 1，Web存储介绍\nHTML5的Web存储功能是让网页在用户计算机上保存一些信息。Web存储又分为两种：\n（1）本地存储，对应 localStorage 对象。用于长期保存网站的数据，并且站内任何页面都可以访问该数据。\n（2）会话存储，对应 sessionStorage 对象。用于临时保存针对一个窗口（或标签页）的数据。在访客关闭窗口或者标签页之前，这些数据是存在的，而关闭之后就会被浏览器删除。\n\n\n### 2，本地存储与会话存储的异同\n（1）本地存储和会话存储的操作代码完全相同，它们的区别仅在于数据的寿命。\n（2）本地存储主要用来保存访客将来还能看到的数据。\n（3）会话存储则用于保存那些需要从一个页面传递给下一个页面的数据。\n\n### 3，Web存储容量限制\n大多数浏览器都把本地存储限制为 5MB 以下。这个是和网站所在的域联系在一起的。\n\n### 4，Web存储的使用样例\n下面以本地存储（localStorage）为例，会话存储改成 sessionStorage 对象即可。\n\n#### （1）文本数据的保存和读取\n```javascript\nlocalStorage.setItem(\"user_name\",\"hangge.com\");\nvar userName = localStorage.getItem(\"user_name\");\n```\n\n#### （2）数值的保存和读取\n```javascript\nlocalStorage.setItem(\"user_age\",100);\nvar userAge = Number(localStorage.getItem(\"user_age\"));\n```\n\n#### （3）日期的保存和读取\n```javascript\n//创建日期对象\nvar today = new Date();\n\n//按照YYY/MM/DD的标准格式把日期转换成文本字符串，然后保存为文本\nvar todayString = today.getFullYear() + \"/\" + today.getMonth() + \"/\" + today.getDate();\nlocalStorage.setItem(\"session_started\", todayString);\n\n//取得日期文本，并基于该文本创建新的日期对象\nvar newToday = new Date(localStorage.getItem(\"session_started\"));\nalert(newToday.getFullYear());\n```\n#### （4）自定义对象的保存和读取\n对象的保存和读取可以通过JSON编码转换来实现。\nJSON.stringify()：把任何对象连同其数据转换为文本形似。\nJSON.parse()：把文本转换回对象。\n```javascript\n//自定义一个User对象\nfunction User(n, a, t) {\n    this.name = n;\n    this.age = a;\n    this.telephone = t;\n}\n\n//创建User对象\nvar user = new User(\"hangge\", 100, \"123456\");\n//将其保存为方便的JSON格式\nsessionStorage.setItem(\"user\", JSON.stringify(user));\n\n//跳转页面\n//window.location = \"hangge.html\";\n\n//将JSON文本转回原来的对象\nvar user2 = JSON.parse(sessionStorage.getItem(\"user\"));\nalert(user2.name);\n```\n\n#### （5）检测某个键的值是否为空，可以直接测试是否等于null\n```javascript\nif(localStorage.getItem(\"user_name\") == null){\n    alert(\"用户名不存在！\");\n}\n```\n\n#### （6）删除数据项\n```javascript\nlocalStorage.removeItem(\"user_name\");\n```\n\n#### （7）清除所有数据\n```javascript\nlocalStorage.clear();\n```\n\n#### （8）查找所有的数据项\n不知道键名，可以使用 key() 方法从本地或者会话存储中取得所有的数据项。下面样例，点击按钮后就会列出所有本地存储中的数据。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Find All Items</title>\n\n  <script>\n    function findAllItems() {\n      //取得用于保存数据项的<ul>元素\n      var itemList = document.getElementById(\"itemList\");\n      //清除列表\n      itemList.innerHTML = \"\";\n\n      //遍历所有数据项\n      for (var i=0; i<localStorage.length; i++) {\n        //取得当前位置数据项的键\n        var key = localStorage.key(i);\n        //取得以该键保存的数据值\n        var item = localStorage.getItem(key);\n\n        //用以上数据创建一个列表项添加到页面中\n        var newItem = document.createElement(\"li\");\n        newItem.innerHTML = key + \": \" + item;\n        itemList.appendChild(newItem);\n      }\n    }\n  </script>\n<body>\n  <button onclick=\"findAllItems()\">导出所有本地存储数据</button>\n  <ul id=\"itemList\">\n  </ul>\n</body>\n</html>\n```\n\n### 5，响应存储变化\nWeb存储也为我们提供了在不同浏览器窗口间通信的机制。也就是说在本地存储或会话存储发生变化时，其他查看同一页面或者同一站点中其他页面的窗口就会触发 window.onStorage 事件。\n这里说的存储变化，指的是向存储中添加新数据项，修改既有数据项，删除数据项或者清除所有数据。而对存储不产生任何影响的操作（用既有键名保存相同的值，或者清除原本就是空的存储空间），不会引发onStorage 事件。\n","source":"_posts/HTML5存储使用详解（本地存储、会话存储）.md","raw":"---\ntitle: HTML5存储使用详解（本地存储、会话存储）\ndate: 2018-06-15 11:44:02\ntags:\n  - HTML5\ncategories: 前端\nid: 2323\n---\n\n### 1，Web存储介绍\nHTML5的Web存储功能是让网页在用户计算机上保存一些信息。Web存储又分为两种：\n（1）本地存储，对应 localStorage 对象。用于长期保存网站的数据，并且站内任何页面都可以访问该数据。\n（2）会话存储，对应 sessionStorage 对象。用于临时保存针对一个窗口（或标签页）的数据。在访客关闭窗口或者标签页之前，这些数据是存在的，而关闭之后就会被浏览器删除。\n\n\n### 2，本地存储与会话存储的异同\n（1）本地存储和会话存储的操作代码完全相同，它们的区别仅在于数据的寿命。\n（2）本地存储主要用来保存访客将来还能看到的数据。\n（3）会话存储则用于保存那些需要从一个页面传递给下一个页面的数据。\n\n### 3，Web存储容量限制\n大多数浏览器都把本地存储限制为 5MB 以下。这个是和网站所在的域联系在一起的。\n\n### 4，Web存储的使用样例\n下面以本地存储（localStorage）为例，会话存储改成 sessionStorage 对象即可。\n\n#### （1）文本数据的保存和读取\n```javascript\nlocalStorage.setItem(\"user_name\",\"hangge.com\");\nvar userName = localStorage.getItem(\"user_name\");\n```\n\n#### （2）数值的保存和读取\n```javascript\nlocalStorage.setItem(\"user_age\",100);\nvar userAge = Number(localStorage.getItem(\"user_age\"));\n```\n\n#### （3）日期的保存和读取\n```javascript\n//创建日期对象\nvar today = new Date();\n\n//按照YYY/MM/DD的标准格式把日期转换成文本字符串，然后保存为文本\nvar todayString = today.getFullYear() + \"/\" + today.getMonth() + \"/\" + today.getDate();\nlocalStorage.setItem(\"session_started\", todayString);\n\n//取得日期文本，并基于该文本创建新的日期对象\nvar newToday = new Date(localStorage.getItem(\"session_started\"));\nalert(newToday.getFullYear());\n```\n#### （4）自定义对象的保存和读取\n对象的保存和读取可以通过JSON编码转换来实现。\nJSON.stringify()：把任何对象连同其数据转换为文本形似。\nJSON.parse()：把文本转换回对象。\n```javascript\n//自定义一个User对象\nfunction User(n, a, t) {\n    this.name = n;\n    this.age = a;\n    this.telephone = t;\n}\n\n//创建User对象\nvar user = new User(\"hangge\", 100, \"123456\");\n//将其保存为方便的JSON格式\nsessionStorage.setItem(\"user\", JSON.stringify(user));\n\n//跳转页面\n//window.location = \"hangge.html\";\n\n//将JSON文本转回原来的对象\nvar user2 = JSON.parse(sessionStorage.getItem(\"user\"));\nalert(user2.name);\n```\n\n#### （5）检测某个键的值是否为空，可以直接测试是否等于null\n```javascript\nif(localStorage.getItem(\"user_name\") == null){\n    alert(\"用户名不存在！\");\n}\n```\n\n#### （6）删除数据项\n```javascript\nlocalStorage.removeItem(\"user_name\");\n```\n\n#### （7）清除所有数据\n```javascript\nlocalStorage.clear();\n```\n\n#### （8）查找所有的数据项\n不知道键名，可以使用 key() 方法从本地或者会话存储中取得所有的数据项。下面样例，点击按钮后就会列出所有本地存储中的数据。\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Find All Items</title>\n\n  <script>\n    function findAllItems() {\n      //取得用于保存数据项的<ul>元素\n      var itemList = document.getElementById(\"itemList\");\n      //清除列表\n      itemList.innerHTML = \"\";\n\n      //遍历所有数据项\n      for (var i=0; i<localStorage.length; i++) {\n        //取得当前位置数据项的键\n        var key = localStorage.key(i);\n        //取得以该键保存的数据值\n        var item = localStorage.getItem(key);\n\n        //用以上数据创建一个列表项添加到页面中\n        var newItem = document.createElement(\"li\");\n        newItem.innerHTML = key + \": \" + item;\n        itemList.appendChild(newItem);\n      }\n    }\n  </script>\n<body>\n  <button onclick=\"findAllItems()\">导出所有本地存储数据</button>\n  <ul id=\"itemList\">\n  </ul>\n</body>\n</html>\n```\n\n### 5，响应存储变化\nWeb存储也为我们提供了在不同浏览器窗口间通信的机制。也就是说在本地存储或会话存储发生变化时，其他查看同一页面或者同一站点中其他页面的窗口就会触发 window.onStorage 事件。\n这里说的存储变化，指的是向存储中添加新数据项，修改既有数据项，删除数据项或者清除所有数据。而对存储不产生任何影响的操作（用既有键名保存相同的值，或者清除原本就是空的存储空间），不会引发onStorage 事件。\n","slug":"HTML5存储使用详解（本地存储、会话存储）","published":1,"updated":"2018-06-15T03:48:56.142Z","_id":"cjifficj50008r0s0o0e6ffz4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1，Web存储介绍\"><a href=\"#1，Web存储介绍\" class=\"headerlink\" title=\"1，Web存储介绍\"></a>1，Web存储介绍</h3><p>HTML5的Web存储功能是让网页在用户计算机上保存一些信息。Web存储又分为两种：<br>（1）本地存储，对应 localStorage 对象。用于长期保存网站的数据，并且站内任何页面都可以访问该数据。<br>（2）会话存储，对应 sessionStorage 对象。用于临时保存针对一个窗口（或标签页）的数据。在访客关闭窗口或者标签页之前，这些数据是存在的，而关闭之后就会被浏览器删除。</p>\n<h3 id=\"2，本地存储与会话存储的异同\"><a href=\"#2，本地存储与会话存储的异同\" class=\"headerlink\" title=\"2，本地存储与会话存储的异同\"></a>2，本地存储与会话存储的异同</h3><p>（1）本地存储和会话存储的操作代码完全相同，它们的区别仅在于数据的寿命。<br>（2）本地存储主要用来保存访客将来还能看到的数据。<br>（3）会话存储则用于保存那些需要从一个页面传递给下一个页面的数据。</p>\n<h3 id=\"3，Web存储容量限制\"><a href=\"#3，Web存储容量限制\" class=\"headerlink\" title=\"3，Web存储容量限制\"></a>3，Web存储容量限制</h3><p>大多数浏览器都把本地存储限制为 5MB 以下。这个是和网站所在的域联系在一起的。</p>\n<h3 id=\"4，Web存储的使用样例\"><a href=\"#4，Web存储的使用样例\" class=\"headerlink\" title=\"4，Web存储的使用样例\"></a>4，Web存储的使用样例</h3><p>下面以本地存储（localStorage）为例，会话存储改成 sessionStorage 对象即可。</p>\n<h4 id=\"（1）文本数据的保存和读取\"><a href=\"#（1）文本数据的保存和读取\" class=\"headerlink\" title=\"（1）文本数据的保存和读取\"></a>（1）文本数据的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">\"user_name\"</span>,<span class=\"string\">\"hangge.com\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userName = localStorage.getItem(<span class=\"string\">\"user_name\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）数值的保存和读取\"><a href=\"#（2）数值的保存和读取\" class=\"headerlink\" title=\"（2）数值的保存和读取\"></a>（2）数值的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">\"user_age\"</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userAge = <span class=\"built_in\">Number</span>(localStorage.getItem(<span class=\"string\">\"user_age\"</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"（3）日期的保存和读取\"><a href=\"#（3）日期的保存和读取\" class=\"headerlink\" title=\"（3）日期的保存和读取\"></a>（3）日期的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照YYY/MM/DD的标准格式把日期转换成文本字符串，然后保存为文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> todayString = today.getFullYear() + <span class=\"string\">\"/\"</span> + today.getMonth() + <span class=\"string\">\"/\"</span> + today.getDate();</span><br><span class=\"line\">localStorage.setItem(<span class=\"string\">\"session_started\"</span>, todayString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得日期文本，并基于该文本创建新的日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newToday = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(localStorage.getItem(<span class=\"string\">\"session_started\"</span>));</span><br><span class=\"line\">alert(newToday.getFullYear());</span><br></pre></td></tr></table></figure>\n<h4 id=\"（4）自定义对象的保存和读取\"><a href=\"#（4）自定义对象的保存和读取\" class=\"headerlink\" title=\"（4）自定义对象的保存和读取\"></a>（4）自定义对象的保存和读取</h4><p>对象的保存和读取可以通过JSON编码转换来实现。<br>JSON.stringify()：把任何对象连同其数据转换为文本形似。<br>JSON.parse()：把文本转换回对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义一个User对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">n, a, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = n;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = a;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.telephone = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建User对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"hangge\"</span>, <span class=\"number\">100</span>, <span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将其保存为方便的JSON格式</span></span><br><span class=\"line\">sessionStorage.setItem(<span class=\"string\">\"user\"</span>, <span class=\"built_in\">JSON</span>.stringify(user));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跳转页面</span></span><br><span class=\"line\"><span class=\"comment\">//window.location = \"hangge.html\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将JSON文本转回原来的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user2 = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">\"user\"</span>));</span><br><span class=\"line\">alert(user2.name);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"（5）检测某个键的值是否为空，可以直接测试是否等于null\"><a href=\"#（5）检测某个键的值是否为空，可以直接测试是否等于null\" class=\"headerlink\" title=\"（5）检测某个键的值是否为空，可以直接测试是否等于null\"></a>（5）检测某个键的值是否为空，可以直接测试是否等于null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"user_name\"</span>) == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"用户名不存在！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（6）删除数据项\"><a href=\"#（6）删除数据项\" class=\"headerlink\" title=\"（6）删除数据项\"></a>（6）删除数据项</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"user_name\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"（7）清除所有数据\"><a href=\"#（7）清除所有数据\" class=\"headerlink\" title=\"（7）清除所有数据\"></a>（7）清除所有数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.clear();</span><br></pre></td></tr></table></figure>\n<h4 id=\"（8）查找所有的数据项\"><a href=\"#（8）查找所有的数据项\" class=\"headerlink\" title=\"（8）查找所有的数据项\"></a>（8）查找所有的数据项</h4><p>不知道键名，可以使用 key() 方法从本地或者会话存储中取得所有的数据项。下面样例，点击按钮后就会列出所有本地存储中的数据。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Find All Items<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findAllItems</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//取得用于保存数据项的&lt;ul&gt;元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> itemList = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"itemList\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//清除列表</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      itemList.innerHTML = <span class=\"string\">\"\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//遍历所有数据项</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;localStorage.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//取得当前位置数据项的键</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> key = localStorage.key(i);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//取得以该键保存的数据值</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> item = localStorage.getItem(key);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//用以上数据创建一个列表项添加到页面中</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> newItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        newItem.innerHTML = key + <span class=\"string\">\": \"</span> + item;</span></span><br><span class=\"line\"><span class=\"undefined\">        itemList.appendChild(newItem);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"findAllItems()\"</span>&gt;</span>导出所有本地存储数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5，响应存储变化\"><a href=\"#5，响应存储变化\" class=\"headerlink\" title=\"5，响应存储变化\"></a>5，响应存储变化</h3><p>Web存储也为我们提供了在不同浏览器窗口间通信的机制。也就是说在本地存储或会话存储发生变化时，其他查看同一页面或者同一站点中其他页面的窗口就会触发 window.onStorage 事件。<br>这里说的存储变化，指的是向存储中添加新数据项，修改既有数据项，删除数据项或者清除所有数据。而对存储不产生任何影响的操作（用既有键名保存相同的值，或者清除原本就是空的存储空间），不会引发onStorage 事件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1，Web存储介绍\"><a href=\"#1，Web存储介绍\" class=\"headerlink\" title=\"1，Web存储介绍\"></a>1，Web存储介绍</h3><p>HTML5的Web存储功能是让网页在用户计算机上保存一些信息。Web存储又分为两种：<br>（1）本地存储，对应 localStorage 对象。用于长期保存网站的数据，并且站内任何页面都可以访问该数据。<br>（2）会话存储，对应 sessionStorage 对象。用于临时保存针对一个窗口（或标签页）的数据。在访客关闭窗口或者标签页之前，这些数据是存在的，而关闭之后就会被浏览器删除。</p>\n<h3 id=\"2，本地存储与会话存储的异同\"><a href=\"#2，本地存储与会话存储的异同\" class=\"headerlink\" title=\"2，本地存储与会话存储的异同\"></a>2，本地存储与会话存储的异同</h3><p>（1）本地存储和会话存储的操作代码完全相同，它们的区别仅在于数据的寿命。<br>（2）本地存储主要用来保存访客将来还能看到的数据。<br>（3）会话存储则用于保存那些需要从一个页面传递给下一个页面的数据。</p>\n<h3 id=\"3，Web存储容量限制\"><a href=\"#3，Web存储容量限制\" class=\"headerlink\" title=\"3，Web存储容量限制\"></a>3，Web存储容量限制</h3><p>大多数浏览器都把本地存储限制为 5MB 以下。这个是和网站所在的域联系在一起的。</p>\n<h3 id=\"4，Web存储的使用样例\"><a href=\"#4，Web存储的使用样例\" class=\"headerlink\" title=\"4，Web存储的使用样例\"></a>4，Web存储的使用样例</h3><p>下面以本地存储（localStorage）为例，会话存储改成 sessionStorage 对象即可。</p>\n<h4 id=\"（1）文本数据的保存和读取\"><a href=\"#（1）文本数据的保存和读取\" class=\"headerlink\" title=\"（1）文本数据的保存和读取\"></a>（1）文本数据的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">\"user_name\"</span>,<span class=\"string\">\"hangge.com\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userName = localStorage.getItem(<span class=\"string\">\"user_name\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）数值的保存和读取\"><a href=\"#（2）数值的保存和读取\" class=\"headerlink\" title=\"（2）数值的保存和读取\"></a>（2）数值的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">\"user_age\"</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userAge = <span class=\"built_in\">Number</span>(localStorage.getItem(<span class=\"string\">\"user_age\"</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"（3）日期的保存和读取\"><a href=\"#（3）日期的保存和读取\" class=\"headerlink\" title=\"（3）日期的保存和读取\"></a>（3）日期的保存和读取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照YYY/MM/DD的标准格式把日期转换成文本字符串，然后保存为文本</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> todayString = today.getFullYear() + <span class=\"string\">\"/\"</span> + today.getMonth() + <span class=\"string\">\"/\"</span> + today.getDate();</span><br><span class=\"line\">localStorage.setItem(<span class=\"string\">\"session_started\"</span>, todayString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取得日期文本，并基于该文本创建新的日期对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newToday = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(localStorage.getItem(<span class=\"string\">\"session_started\"</span>));</span><br><span class=\"line\">alert(newToday.getFullYear());</span><br></pre></td></tr></table></figure>\n<h4 id=\"（4）自定义对象的保存和读取\"><a href=\"#（4）自定义对象的保存和读取\" class=\"headerlink\" title=\"（4）自定义对象的保存和读取\"></a>（4）自定义对象的保存和读取</h4><p>对象的保存和读取可以通过JSON编码转换来实现。<br>JSON.stringify()：把任何对象连同其数据转换为文本形似。<br>JSON.parse()：把文本转换回对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义一个User对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">n, a, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = n;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = a;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.telephone = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建User对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">\"hangge\"</span>, <span class=\"number\">100</span>, <span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将其保存为方便的JSON格式</span></span><br><span class=\"line\">sessionStorage.setItem(<span class=\"string\">\"user\"</span>, <span class=\"built_in\">JSON</span>.stringify(user));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跳转页面</span></span><br><span class=\"line\"><span class=\"comment\">//window.location = \"hangge.html\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将JSON文本转回原来的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user2 = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">\"user\"</span>));</span><br><span class=\"line\">alert(user2.name);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"（5）检测某个键的值是否为空，可以直接测试是否等于null\"><a href=\"#（5）检测某个键的值是否为空，可以直接测试是否等于null\" class=\"headerlink\" title=\"（5）检测某个键的值是否为空，可以直接测试是否等于null\"></a>（5）检测某个键的值是否为空，可以直接测试是否等于null</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(localStorage.getItem(<span class=\"string\">\"user_name\"</span>) == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"用户名不存在！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"（6）删除数据项\"><a href=\"#（6）删除数据项\" class=\"headerlink\" title=\"（6）删除数据项\"></a>（6）删除数据项</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"user_name\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"（7）清除所有数据\"><a href=\"#（7）清除所有数据\" class=\"headerlink\" title=\"（7）清除所有数据\"></a>（7）清除所有数据</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.clear();</span><br></pre></td></tr></table></figure>\n<h4 id=\"（8）查找所有的数据项\"><a href=\"#（8）查找所有的数据项\" class=\"headerlink\" title=\"（8）查找所有的数据项\"></a>（8）查找所有的数据项</h4><p>不知道键名，可以使用 key() 方法从本地或者会话存储中取得所有的数据项。下面样例，点击按钮后就会列出所有本地存储中的数据。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Find All Items<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findAllItems</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//取得用于保存数据项的&lt;ul&gt;元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> itemList = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"itemList\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//清除列表</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      itemList.innerHTML = <span class=\"string\">\"\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">//遍历所有数据项</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;localStorage.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//取得当前位置数据项的键</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> key = localStorage.key(i);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//取得以该键保存的数据值</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> item = localStorage.getItem(key);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//用以上数据创建一个列表项添加到页面中</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> newItem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        newItem.innerHTML = key + <span class=\"string\">\": \"</span> + item;</span></span><br><span class=\"line\"><span class=\"undefined\">        itemList.appendChild(newItem);</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"findAllItems()\"</span>&gt;</span>导出所有本地存储数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5，响应存储变化\"><a href=\"#5，响应存储变化\" class=\"headerlink\" title=\"5，响应存储变化\"></a>5，响应存储变化</h3><p>Web存储也为我们提供了在不同浏览器窗口间通信的机制。也就是说在本地存储或会话存储发生变化时，其他查看同一页面或者同一站点中其他页面的窗口就会触发 window.onStorage 事件。<br>这里说的存储变化，指的是向存储中添加新数据项，修改既有数据项，删除数据项或者清除所有数据。而对存储不产生任何影响的操作（用既有键名保存相同的值，或者清除原本就是空的存储空间），不会引发onStorage 事件。</p>\n"},{"title":"删除github上远程的分支","date":"2018-06-15T07:37:56.000Z","_content":"\n#### 如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\n```\ngit push origin :source\n```\n如图\n![刪除分支](删除github上远程的分支/001.png)\n\n#### 切换并新建分支\n```\ngit checkout -b dev\n```\n它是下面两条命令的简写，新建分支，然后切换分支\n```\ngit branch dev\ngit checkout dev\n```\n","source":"_posts/删除github上远程的分支.md","raw":"---\ntitle: 删除github上远程的分支\ndate: 2018-06-15 15:37:56\ntags:\n  - git\ncategories: 工具\n---\n\n#### 如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\n```\ngit push origin :source\n```\n如图\n![刪除分支](删除github上远程的分支/001.png)\n\n#### 切换并新建分支\n```\ngit checkout -b dev\n```\n它是下面两条命令的简写，新建分支，然后切换分支\n```\ngit branch dev\ngit checkout dev\n```\n","slug":"删除github上远程的分支","published":1,"updated":"2018-06-15T09:05:39.419Z","_id":"cjifnv53d00001ws0haoj2k2z","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"如果想删除github上的source分支-通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\"><a href=\"#如果想删除github上的source分支-通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\" class=\"headerlink\" title=\"如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\"></a>如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">push</span> origin :<span class=\"keyword\">source</span></span><br></pre></td></tr></table></figure>\n<p>如图<br><img src=\"/2018/06/15/删除github上远程的分支/001.png\" alt=\"刪除分支\"></p>\n<h4 id=\"切换并新建分支\"><a href=\"#切换并新建分支\" class=\"headerlink\" title=\"切换并新建分支\"></a>切换并新建分支</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -<span class=\"selector-tag\">b</span> dev</span><br></pre></td></tr></table></figure>\n<p>它是下面两条命令的简写，新建分支，然后切换分支<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch <span class=\"built_in\">dev</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"如果想删除github上的source分支-通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\"><a href=\"#如果想删除github上的source分支-通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\" class=\"headerlink\" title=\"如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支\"></a>如果想删除github上的source分支,通过下面命令推送一个空分支到远程分支，其实就相当于删除远程分支</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">push</span> origin :<span class=\"keyword\">source</span></span><br></pre></td></tr></table></figure>\n<p>如图<br><img src=\"/2018/06/15/删除github上远程的分支/001.png\" alt=\"刪除分支\"></p>\n<h4 id=\"切换并新建分支\"><a href=\"#切换并新建分支\" class=\"headerlink\" title=\"切换并新建分支\"></a>切换并新建分支</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -<span class=\"selector-tag\">b</span> dev</span><br></pre></td></tr></table></figure>\n<p>它是下面两条命令的简写，新建分支，然后切换分支<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch <span class=\"built_in\">dev</span></span><br><span class=\"line\">git checkout <span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/删除github上远程的分支/001.png","slug":"001.png","post":"cjifnv53d00001ws0haoj2k2z","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjif9nuw70000wks0535pw6te","category_id":"cjif9nuwf0002wks068eubjlp","_id":"cjif9nuwq0009wks0pi6v6l8g"},{"post_id":"cjif9nuwm0006wks09u6qydvb","category_id":"cjif9nuwr000bwks0f7xen2ib","_id":"cjif9nuwv000gwks0qsojasnt"},{"post_id":"cjif9nuwj0004wks0j4pfk3fg","category_id":"cjif9nuwr000bwks0f7xen2ib","_id":"cjifddptx0001tws0r1jwf22r"},{"post_id":"cjif9nuwc0001wks0rrsbmoet","category_id":"cjif9nuwn0007wks09h18wfbu","_id":"cjifewz2m0000r0s0zabu5zmc"},{"post_id":"cjiff2g720001r0s07efvqlbu","category_id":"cjif9nuwr000bwks0f7xen2ib","_id":"cjiff3mty0003r0s07l2qdgtz"},{"post_id":"cjiff9vd80005r0s0yxuitrfj","category_id":"cjif9nuwr000bwks0f7xen2ib","_id":"cjiffbqou0007r0s0defln3mf"},{"post_id":"cjifficj50008r0s0o0e6ffz4","category_id":"cjif9nuwr000bwks0f7xen2ib","_id":"cjiffj8hn000ar0s0j071ycd5"},{"post_id":"cjifnv53d00001ws0haoj2k2z","category_id":"cjif9nuwf0002wks068eubjlp","_id":"cjifnxihd00021ws04k0d1hke"}],"PostTag":[{"post_id":"cjif9nuwm0006wks09u6qydvb","tag_id":"cjif9nuws000cwks07scbkose","_id":"cjif9nuww000hwks0sheesfdf"},{"post_id":"cjif9nuwm0006wks09u6qydvb","tag_id":"cjif9nuwl0005wks0lnqvktwh","_id":"cjif9nuww000iwks09gem9pce"},{"post_id":"cjif9nuwj0004wks0j4pfk3fg","tag_id":"cjifddptv0000tws0jf3e0bta","_id":"cjifddptz0002tws0qcydolx6"},{"post_id":"cjiff2g720001r0s07efvqlbu","tag_id":"cjiff3mtx0002r0s0eybu8uo3","_id":"cjiff3mtz0004r0s0wja7tjgf"},{"post_id":"cjiff9vd80005r0s0yxuitrfj","tag_id":"cjiff3mtx0002r0s0eybu8uo3","_id":"cjiffbqot0006r0s09oq45se6"},{"post_id":"cjifficj50008r0s0o0e6ffz4","tag_id":"cjiffj8hm0009r0s03varpabo","_id":"cjiffj8hn000br0s0czy17kkr"},{"post_id":"cjifnv53d00001ws0haoj2k2z","tag_id":"cjifnxihc00011ws0pvuzlvd2","_id":"cjifqxarz0001fos0ggapq7ja"},{"post_id":"cjif9nuwh0003wks0a3wyc9rs","tag_id":"cjifprfps00025os0fqlo34pl","_id":"cjifqxlzi0003fos0oembc9fs"}],"Tag":[{"name":"react","_id":"cjif9nuwl0005wks0lnqvktwh"},{"name":"node","_id":"cjif9nuwq0008wks0pyqqfkwp"},{"name":"vue","_id":"cjif9nuws000cwks07scbkose"},{"name":"Gitment","_id":"cjifddptv0000tws0jf3e0bta"},{"name":"JavaScript","_id":"cjiff3mtx0002r0s0eybu8uo3"},{"name":"HTML5","_id":"cjiffj8hm0009r0s03varpabo"},{"name":"git","_id":"cjifnxihc00011ws0pvuzlvd2"},{"name":"Git","_id":"cjifprfps00025os0fqlo34pl"}]}}